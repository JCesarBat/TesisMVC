// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: actividad_cultural.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createActividadCultural = `-- name: CreateActividadCultural :one
INSERT INTO "actividad_cultural" ("id_asociado",
                                  "especialidad")
VALUES ($1,$2) RETURNING id, id_asociado, especialidad
`

type CreateActividadCulturalParams struct {
	IDAsociado   int64    `json:"id_asociado"`
	Especialidad []string `json:"especialidad"`
}

func (q *Queries) CreateActividadCultural(ctx context.Context, arg CreateActividadCulturalParams) (ActividadCultural, error) {
	row := q.db.QueryRowContext(ctx, createActividadCultural, arg.IDAsociado, pq.Array(arg.Especialidad))
	var i ActividadCultural
	err := row.Scan(&i.ID, &i.IDAsociado, pq.Array(&i.Especialidad))
	return i, err
}

const createParticipacionCultural = `-- name: CreateParticipacionCultural :one
INSERT INTO "participacionC" (
    "id_actividad_cultural",
    "especialidad",
    "fecha",
    "lugar_alcanzado",
    "donde_se_desarrollo"
) VALUES ($1,$2,$3,$4,$5) RETURNING id, id_actividad_cultural, especialidad, fecha, lugar_alcanzado, donde_se_desarrollo
`

type CreateParticipacionCulturalParams struct {
	IDActividadCultural sql.NullInt64 `json:"id_actividad_cultural"`
	Especialidad        string        `json:"especialidad"`
	Fecha               time.Time     `json:"fecha"`
	LugarAlcanzado      sql.NullInt32 `json:"lugar_alcanzado"`
	DondeSeDesarrollo   string        `json:"donde_se_desarrollo"`
}

func (q *Queries) CreateParticipacionCultural(ctx context.Context, arg CreateParticipacionCulturalParams) (ParticipacionC, error) {
	row := q.db.QueryRowContext(ctx, createParticipacionCultural,
		arg.IDActividadCultural,
		arg.Especialidad,
		arg.Fecha,
		arg.LugarAlcanzado,
		arg.DondeSeDesarrollo,
	)
	var i ParticipacionC
	err := row.Scan(
		&i.ID,
		&i.IDActividadCultural,
		&i.Especialidad,
		&i.Fecha,
		&i.LugarAlcanzado,
		&i.DondeSeDesarrollo,
	)
	return i, err
}

const deleteActividadCulural = `-- name: DeleteActividadCulural :exec
DELETE FROM "actividad_cultural" WHERE id =$1
`

func (q *Queries) DeleteActividadCulural(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteActividadCulural, id)
	return err
}

const deleteParticipacionC = `-- name: DeleteParticipacionC :exec
DELETE FROM "participacionC" WHERE id =$1
`

func (q *Queries) DeleteParticipacionC(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteParticipacionC, id)
	return err
}

const getActividadCultural = `-- name: GetActividadCultural :one
SELECT id, id_asociado, especialidad FROM "actividad_cultural" WHERE id=$1
`

func (q *Queries) GetActividadCultural(ctx context.Context, id int64) (ActividadCultural, error) {
	row := q.db.QueryRowContext(ctx, getActividadCultural, id)
	var i ActividadCultural
	err := row.Scan(&i.ID, &i.IDAsociado, pq.Array(&i.Especialidad))
	return i, err
}

const getParticipacionC = `-- name: GetParticipacionC :many
SELECT id, id_actividad_cultural, especialidad, fecha, lugar_alcanzado, donde_se_desarrollo FROM "participacionC" WHERE id_actividad_cultural = $1
`

func (q *Queries) GetParticipacionC(ctx context.Context, idActividadCultural sql.NullInt64) ([]ParticipacionC, error) {
	rows, err := q.db.QueryContext(ctx, getParticipacionC, idActividadCultural)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ParticipacionC{}
	for rows.Next() {
		var i ParticipacionC
		if err := rows.Scan(
			&i.ID,
			&i.IDActividadCultural,
			&i.Especialidad,
			&i.Fecha,
			&i.LugarAlcanzado,
			&i.DondeSeDesarrollo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActividadCultural = `-- name: UpdateActividadCultural :one
UPDATE "actividad_cultural" SET especialidad =array_append("especialidad",$2)
 WHERE id = $1  RETURNING id, id_asociado, especialidad
`

type UpdateActividadCulturalParams struct {
	ID          int64       `json:"id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) UpdateActividadCultural(ctx context.Context, arg UpdateActividadCulturalParams) (ActividadCultural, error) {
	row := q.db.QueryRowContext(ctx, updateActividadCultural, arg.ID, arg.ArrayAppend)
	var i ActividadCultural
	err := row.Scan(&i.ID, &i.IDAsociado, pq.Array(&i.Especialidad))
	return i, err
}

const updateParticipacionC = `-- name: UpdateParticipacionC :one
UPDATE "participacionC" SET
        "especialidad" =$2,
        "fecha"=$3,
        "lugar_alcanzado"=$4,
        "donde_se_desarrollo"=$5
    WHERE id =$1 RETURNING id, id_actividad_cultural, especialidad, fecha, lugar_alcanzado, donde_se_desarrollo
`

type UpdateParticipacionCParams struct {
	ID                int64         `json:"id"`
	Especialidad      string        `json:"especialidad"`
	Fecha             time.Time     `json:"fecha"`
	LugarAlcanzado    sql.NullInt32 `json:"lugar_alcanzado"`
	DondeSeDesarrollo string        `json:"donde_se_desarrollo"`
}

func (q *Queries) UpdateParticipacionC(ctx context.Context, arg UpdateParticipacionCParams) (ParticipacionC, error) {
	row := q.db.QueryRowContext(ctx, updateParticipacionC,
		arg.ID,
		arg.Especialidad,
		arg.Fecha,
		arg.LugarAlcanzado,
		arg.DondeSeDesarrollo,
	)
	var i ParticipacionC
	err := row.Scan(
		&i.ID,
		&i.IDActividadCultural,
		&i.Especialidad,
		&i.Fecha,
		&i.LugarAlcanzado,
		&i.DondeSeDesarrollo,
	)
	return i, err
}
