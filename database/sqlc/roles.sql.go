// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package database

import (
	"context"
)

const createRol = `-- name: CreateRol :one
INSERT INTO "rol" (
                   rol
) VALUES ($1) RETURNING id, rol
`

func (q *Queries) CreateRol(ctx context.Context, rol string) (Rol, error) {
	row := q.db.QueryRowContext(ctx, createRol, rol)
	var i Rol
	err := row.Scan(&i.ID, &i.Rol)
	return i, err
}

const getAllRol = `-- name: GetAllRol :many
SELECT id, rol FROM "rol"
`

func (q *Queries) GetAllRol(ctx context.Context) ([]Rol, error) {
	rows, err := q.db.QueryContext(ctx, getAllRol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rol{}
	for rows.Next() {
		var i Rol
		if err := rows.Scan(&i.ID, &i.Rol); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRolFromUser = `-- name: GetAllRolFromUser :many
SELECT id, rol FROM "rol" WHERE "rol".id = (SELECT id FROM "user_roles" WHERE user_id = $1)
`

func (q *Queries) GetAllRolFromUser(ctx context.Context, userID int64) ([]Rol, error) {
	rows, err := q.db.QueryContext(ctx, getAllRolFromUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rol{}
	for rows.Next() {
		var i Rol
		if err := rows.Scan(&i.ID, &i.Rol); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRolUser = `-- name: InsertRolUser :one
INSERT INTO "user_roles" (
                          user_id,
                          rol_id
) VALUES ($1,$2) RETURNING id, user_id, rol_id
`

type InsertRolUserParams struct {
	UserID int64 `json:"user_id"`
	RolID  int64 `json:"rol_id"`
}

func (q *Queries) InsertRolUser(ctx context.Context, arg InsertRolUserParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, insertRolUser, arg.UserID, arg.RolID)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserID, &i.RolID)
	return i, err
}
